<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="runBtn.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADrwAAA68AZW8ckkAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOWwzfk4A
        AAMKSURBVDhPZZN/LNRhHMcf4avUkNw5JCnC9ZutVBOiuoVS5McxOe6oy1XkV924KK40otRI8zPOudyR
        ttPa8qO11Vq//dFkDGvD1mi1cjrefb/Xtdl6P/v89Xxee3+e53k/ZJFMlhctt19Xvi6X1xDSF6dMGOMr
        48eCGw/2uVS65FpetHRgev62LpaMLHEpdeELlMJJWVcRstV5kCgzIW7NgESVhfSOC4hoi55gl3DiiT8x
        M1IGmbiWucad78zR5aplONuWjdM0JGqWIKlZjMTWU0hoTUWyKg2JnSk6O7mdkGZMDSSrhMURqERfc9T5
        OKPMwqnWc0i6L0ZtbxM6XnchTiFClEqAyAcnEKsRIlwd+Y06THkYYO5NruzSo2KDIwMmK9LAb0jG8NQI
        GPUMPkOYKhb72sNxUBMJfncKODcc79EoRcLvH3uT2S6lz5eOpJbTiKkXILA6FL4VwRidHscCvVreq8Cq
        coNNzVqw7rljU733MFlB7MhxReyvNPpyRAoJCjRyDE0O49PkID5NDWLi+5TBnVHdmyasadgIpyYvbG/b
        NUcsyHoG/i1qkcBD7gOxIgOzv2eh0+vomsP8wrwRBXpH+rFDsxdbNL7Y0xmgp4f2JCFNRwbWF24FybYG
        ybcBp8ITrlXb4FfLoycYwU+dHs9GX+Cw9igO9YWB1xOKQHXQmMGZU+pYzsl3B7lgAyK3hektNqwqndHx
        sR9fpmfRPfgcsU/5ELxLhPBDEsTvxXAqdXrIPBShZBTXs2L7D3MZC+S6LajbHKyqdsXV3ho0v32MyCdR
        ODkggnQ0E5e/SJH6SvjTNNj0GA1bGNJlVWIjdavcpjcrY8PijgPYdW7wUvogQLsf0S9jcP7zGZR/LUbJ
        eKGenceupEFHuoxR5REL62srr2xu3KlbXbsRnPoN8FR5w687CDE0LB3KQfZA+qx9AauKWBE3mvibsEUy
        NxOa+Tncctb6KHbN7O7wR7CWhxBt6Az3LvcJdYCKoHsYx//Af2JGsSTLiJPhKSjiRRcTReZHLTXuG0XI
        H50rk3A/+Uw3AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="explanationLbl.Text" xml:space="preserve">
    <value>The Apriori algorithmn shows trends in a dataset. Rules have an antecedent (the "if" part of the rule, called "lhs" in the summary below) and a consequent (the "then" part of the rule, called "rhs" below). The support is the number of transactions with all the items in both the antecedent and consequent represented. Here it's expressed as a percentage of the total number of transactions. Confidence is the conditional probability that the consequent will occur given the occurrence of the antecedent. Lift is the ratio of confidence to expected confidence.</value>
  </data>
</root>